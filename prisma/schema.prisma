// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Edital {
  id          String    @id @default(cuid())
  title       String
  description String
  category    String    // educacao, saude, agricultura, etc
  status      String    @default("RASCUNHO") // RASCUNHO, INSCRICOES_ABERTAS, ANALISE_TECNICA, VOTACAO, ENCERRADO
  budget      Float
  startDate   DateTime?
  endDate     DateTime?
  votingStart DateTime?
  votingEnd   DateTime?
  resultDate  DateTime?
  targetAudience String  // "Instituições Federais", "Hospitais Filantrópicos", etc
  documents   String?   // JSON com links para documentos
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projects    Project[]
}

model Project {
  id            String   @id @default(cuid())
  title         String
  description   String
  organization  String   // Nome da organização/entidade
  category      String
  budget        Float
  location      String
  status        String   @default("INSCRITO") // INSCRITO, APROVADO_TECNICA, REPROVADO_TECNICA, SELECIONADO
  technicalAnalysis String? // Resultado da análise técnica
  editalId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  edital        Edital   @relation(fields: [editalId], references: [id])
  votes         Vote[]
}

model Voter {
  id        String   @id @default(cuid())
  cpf       String   @unique
  phone     String   @unique
  email     String?
  name      String?
  hasVoted  Boolean  @default(false)
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  votes     Vote[]
}

model Vote {
  id        String   @id @default(cuid())
  voterId   String
  projectId String
  editalId  String
  ipAddress String
  userAgent String
  createdAt DateTime @default(now())
  voter     Voter    @relation(fields: [voterId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])

  @@unique([voterId, editalId])
}

model Settings {
  id                String   @id @default(cuid())
  key               String   @unique
  value             String
  description       String?
  updatedAt         DateTime @updatedAt
} 